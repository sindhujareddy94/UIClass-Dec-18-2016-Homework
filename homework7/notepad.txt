1)	what is the differences between id, class, attribute, tagName selectors and differences between them, when to use what?
The id selector:
This selector uses the id attribute of an HTML element to select a particular element. The id of an element must be a different one with in a page, so that the id selector is used to select one element. To choose an element with a specific id, write a hash character followed by the id of the element. 
The class selector selects elements with a specific class attribute. To choose elements with a specific class we should write a period (.) character followed by the name of the class. We can also specify that only particular HTML elements should be affected by a class. HTML elements can also refer to more than one class.
The attribute selector is used to select elements with a specified attribute. [Attribute~=”value”] selector is used to select elements with an attribute value containing a specific word. [attribute|=”value”] selector is used to select elements with the specified attribute starting with the specified value. [attribute^=”value”] selector is used to select elements whose attribute value begins with a specified value. [attribute$=”value”] selector is used to select elements whose attribute value ends with a specified value. [attribute*=”value”] selector is used to select elements whose attribute value contains a specified value.
tagName property returns the tag name of the element. In HTML, the returned value of the tagName property is always in uppercase. This property is read-only. Syntax is element.tagName


2)	what is css Specificity? 
Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied. Specificity is based on the matching rules which are composed of different sorts of CSS selectors. Specificity is a weight that is applied to a given CSS declaration, determined by the number of each selector type in the matching selector. When specificity is equal to any of the multiple declarations, the last declaration found in the CSS is applied to the element. Specificity only applies when the same element is targeted by multiple declarations. As per CSS rules, directly targeted element will always take precedence over rules which an element inherits from its ancestor.
The following list of selector types increases by specificity:
1.	Type selectors (e.g., h1) and pseudo-elements (e.g., :before).
2.	Class selectors (e.g., .example), attributes selectors (e.g., [type="radio"]) and pseudo-classes (e.g., :hover).
3.	ID selectors (e.g., #example).
Universal selector (*), combinators (+, >, ~, ' ') and negation pseudo-class (:not()) have no effect on specificity. (The selectors declared inside :not() do, however.)
Inline styles added to an element (e.g., style="font-weight:bold") always overwrite any styles in external stylesheets, and thus can be thought of as having the highest specificity.

3)	descendent selectors in css?
Descendent selector typically represented by a single space character which combines two selectors such that elements matched by the second are selected if they have an ancestor element matching the first selector. Selectors that utilize a descendant combinatory are called descendant selectors.
This selector matches all elements that are descendants of a specified element.
The descendant combinator is technically one or more CSS white space characters — the space character and/or one of four control characters: carriage return, form feed, new line, and tab characters — between two selectors in the absence of another combinator. Additionally, the white space characters of which the combinator is comprised may contain any number of CSS comments.

Syntax: selector1 selector2 { /*property declarations */ }
	Selector1 >> selector2 { /*property declarations */ }

4)	child selector in css?
The child selector selects all elements that are the immediate children of a specified element. This selector separates two selectors and matches only those elements matched by the second selector that are direct children of elements matched by the first. By contrast, when two selectors are combined with the descendant selector, the combined selector expression matches those elements matched by the second selector for which there exists an ancestor element matched by the first selector, regardless of the number of "hops" up the DOM.
Syntax: selector1 > selector2 { style properties }

5)	adjacent sibling selectors in css?
Adjacent sibling selector is also called as next-sibling selector. The adjacent sibling selector selects all elements that are the adjacent siblings of a specified element. Sibling elements must have the same parent element and adjacent means immediately following.
Syntax: former_element + target_element { style properties }
6)	multiple selectors in css? using, comma
The comma in a CSS selector separates multiple selectors with the same styles. By using comma between the selectors, you can create a more compact style sheet that’s easier to update in the future that is easier to read. We can use comas to separate multiple grouped selectors in the style. Any valid selector can be placed in a group, and all elements in the document that match all the grouped elements will have the same style based on that property.
Separate multiple selectors that have the same style with commas. This is called selector grouping. 
Selector1, selector2 { style property : style ; }
Grouping selectors is a shorthand mechanism to keep your CSS styles compact.

7)	variations in attribute based selectors?

Attribute selectors select an element using the presence of a given attribute or attribute value.
[attr]
Represents an element with an attribute name of attr.
[attr=value]
Represents an element with an attribute name of attr and whose value is exactly "value".
[attr~=value]
Represents an element with an attribute name of attr whose value is a whitespace-separated list of words, one of which is exactly "value".
[attr|=value]
Represents an element with an attribute name of attr. Its value can be exactly “value” or can begin with “value” immediately followed by “-” (U+002D). It can be used for language subcode matches.
[attr^=value]
Represents an element with an attribute name of attr and whose first value is prefixed by "value".
[attr$=value]
Represents an element with an attribute name of attr and whose last value is suffixed by "value".
[attr*=value]
Represents an element with an attribute name of attr and whose value contains at least one occurrence of string "value" as substring.
[attr operator value i]
Adding an i (or I) before the closing bracket causes the value to be compared case-insensitively (for characters within the ASCII range).

